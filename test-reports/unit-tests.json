{
  "stats": {
    "suites": 3,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-20T22:54:45.687Z",
    "end": "2019-05-20T22:54:52.871Z",
    "duration": 7184,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "e93b0209-7d0f-41fc-a729-f60b45b3a280",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "b64005ce-07c9-47cd-b479-809ae54cee97",
        "title": "Users API test",
        "fullFile": "C:\\Users\\Sreenath\\Downloads\\latest\\NodeLabs\\DataLakeAPI\\test\\testUsersAPI.js",
        "file": "\\test\\testUsersAPI.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Users API test \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\ninvalidUser.username = 'chancer1';\ninvalidUser.password = 'bad1';\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "81a6ed2c-de4f-4701-a1e0-e755bf67d439",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should register a user",
            "fullTitle": "Users API test should register a user",
            "timedOut": false,
            "duration": 4681,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var newUser = {\n            username: \"fred\",\n            password: \"apassword\"\n        };\n        (0, _supertest2.default)(_index.app).post('/api/users').send(newUser).query({\n            action: 'register'\n        }).expect('Content-type', /json/).expect(201) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(201);\n            done();\n        }).catch(function (error) {\n            console.error(\"Failed\", error);\n            done(error);\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "6a733e37-3cfc-4597-89c0-95b105ec3401",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a user token for valid user",
            "fullTitle": "Users API test should return a user token for valid user",
            "timedOut": false,
            "duration": 1243,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return (0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n        }).catch(function (error) {\n            console.error(\"Failed\", error);\n            throw error;\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "dfc8d9d7-56dc-4d17-863d-43a049c110f0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a user token for valid user",
            "fullTitle": "Users API test should return a user token for valid user",
            "timedOut": false,
            "duration": 250,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "806b870b-536a-4674-8729-06162b20f32e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not return a token for invalid user",
            "fullTitle": "Users API test should not return a token for invalid user",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_index.app).post('/api/users').send(invalidUser).expect('Content-type', /json/).expect(401) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(401);\n            res.body.success.should.be.false;\n            _should2.default.not.exist(res.body.token);\n            done();\n        }).catch(function (error) {\n            console.error(\"Failed\", error);\n            done(error);\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "66ecd5b4-42c9-417c-9d97-e8c9f3f747d0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6a733e37-3cfc-4597-89c0-95b105ec3401",
          "dfc8d9d7-56dc-4d17-863d-43a049c110f0",
          "806b870b-536a-4674-8729-06162b20f32e",
          "66ecd5b4-42c9-417c-9d97-e8c9f3f747d0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 6179,
        "root": false,
        "rootEmpty": false,
        "_timeout": 120000
      },
      {
        "uuid": "2e6b49cb-2b56-4fd0-9460-a1d075eda8ca",
        "title": "Data Lake Activity API test",
        "fullFile": "C:\\Users\\Sreenath\\Downloads\\latest\\NodeLabs\\DataLakeAPI\\test\\testzActsAPI.js",
        "file": "\\test\\testzActsAPI.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Data Lake Activity API test \"before all\" hook",
            "timedOut": false,
            "duration": 243,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\n// calling home page api\n(0, _supertest2.default)(_index.app).post('/api/users').send({ username: 'user1', password: 'test1' }).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  done();\n}).catch(function (error) {\n  console.error(\"Failed\", error);\n  done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b437c6af-0cd5-40ae-9579-36ecff044962",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should get a list of activities",
            "fullTitle": "Data Lake Activity API test should get a list of activities",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_index.app).get('/api/acts').set('Authorization', token).expect('Content-type', /json/).expect(200).then(function (res) {\n      // HTTP status should be 200\n      res.should.have.property('status').equal(200);\n      done();\n    }).catch(function (error) {\n      console.error(\"Failed\", error);\n      done(error);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "5aeb549b-9d64-43bd-aa53-e367669a2b8c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not return activities without valid token",
            "fullTitle": "Data Lake Activity API test should not return activities without valid token",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "542f72ce-9a44-484c-822c-b80be061c8ac",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should add a new activity",
            "fullTitle": "Data Lake Activity API test should add a new activity",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_index.app).post('/api/acts').set('Authorization', token).send(testAct).expect(201).then(function (res) {\n      res.should.have.property('status').equal(201);\n      testact_id = res.body.activity._id;\n      done();\n    }).catch(function (error) {\n      console.error(\"Failed\", error);\n      done(error);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "318b64d6-8859-46d0-8025-5cf0c0c4ce14",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should get the newly added activity by _id",
            "fullTitle": "Data Lake Activity API test should get the newly added activity by _id",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_index.app).get('/api/acts/' + testact_id).set('Authorization', token).expect(201).then(function (res) {\n      res.should.have.property('status').equal(201);\n      console.log(\"==============resp json===========================\");\n      console.log(res.body);\n      res.body.activity.should.have.property('_id');\n      res.body.activity.url.should.equal(\"www.npm.com\");\n      done();\n    }).catch(function (error) {\n      console.error(\"Failed\", error);\n      done(error);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "19336d56-3b75-4fde-b443-8919df7d84ce",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should delete the newly added activity by _id",
            "fullTitle": "Data Lake Activity API test should delete the newly added activity by _id",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_index.app).delete('/api/acts/' + testact_id).set('Authorization', token).expect(204).then(function (res) {\n      res.should.have.property('status').equal(204);\n      // console.log(\"==============resp json===========================\");\n      // console.log(res.body);\n      // res.body.activity.should.have.property('_id');\n      // res.body.activity.url.should.equal(\"www.npm.com\");\n      done();\n    }).catch(function (error) {\n      console.error(\"Failed\", error);\n      done(error);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a7fa9b33-2989-4c10-8e17-c7de9cd3e12f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not return the any activity for _id",
            "fullTitle": "Data Lake Activity API test should not return the any activity for _id",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "f8eb3abf-499d-4b81-bc81-5497a621ade4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5aeb549b-9d64-43bd-aa53-e367669a2b8c",
          "542f72ce-9a44-484c-822c-b80be061c8ac",
          "318b64d6-8859-46d0-8025-5cf0c0c4ce14",
          "19336d56-3b75-4fde-b443-8919df7d84ce",
          "a7fa9b33-2989-4c10-8e17-c7de9cd3e12f",
          "f8eb3abf-499d-4b81-bc81-5497a621ade4"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 60,
        "root": false,
        "rootEmpty": false,
        "_timeout": 120000
      },
      {
        "uuid": "8d0bbf07-255e-46bb-87f7-042db6918233",
        "title": "Data Lake privacy API GET all test",
        "fullFile": "C:\\Users\\Sreenath\\Downloads\\latest\\NodeLabs\\DataLakeAPI\\test\\testzzPrivacy.js",
        "file": "\\test\\testzzPrivacy.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Data Lake privacy API GET all test \"before all\" hook",
            "timedOut": false,
            "duration": 264,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\n// calling home page api\n(0, _supertest2.default)(_index.app).post('/api/users').send({ username: 'user1', password: 'test1' }).expect(200).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('success').equal(true);\n    token = res.body.token;\n    done();\n}).catch(function (error) {\n    console.error(\"Failed\", error);\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b3d56f16-cf7b-4af6-a519-979352def709",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should get the privacy list",
            "fullTitle": "Data Lake privacy API GET all test should get the privacy list",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_index.app).get('/api/privacy').set('Authorization', token).expect('Content-type', /json/).expect(200).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            done();\n        }).catch(function (error) {\n            console.error(\"Failed\", error);\n            done(error);\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "8590d40d-9937-4863-a7fe-587248748e42",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should prevent access to privacy without valid token",
            "fullTitle": "Data Lake privacy API GET all test should prevent access to privacy without valid token",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "74a37227-bf83-41bc-a7b8-ed13a20d2f5b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should add a new privacy option",
            "fullTitle": "Data Lake privacy API GET all test should add a new privacy option",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_index.app).post('/api/privacy').set('Authorization', token).send(testPrivacy).expect(201).then(function (res) {\n            res.should.have.property('status').equal(201);\n            res.body.privacy.should.have.property('_id');\n            testprivacy_id = res.body.privacy._id;\n            done();\n        }).catch(function (error) {\n            console.error(\"Failed\", error);\n            done(error);\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "1c0fbb80-951c-46bf-aca2-55e199bb81d3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should get the newly added privacy by _id and check for default rule",
            "fullTitle": "Data Lake privacy API GET all test should get the newly added privacy by _id and check for default rule",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_index.app).get('/api/privacy/' + testprivacy_id).set('Authorization', token).expect(200).then(function (res) {\n            res.should.have.property('status').equal(200);\n            console.log(\"==============resp json===========================\");\n            console.log(res.body);\n            console.log(\" res.body.privacy.rules.length =\" + res.body.privacy.rules.length);\n            console.log(\"==============resp json===========================\");\n            res.body.privacy.label.should.equal(\"cuurent privacy\");\n            res.body.privacy.rules.length.should.equal(1);\n            res.body.privacy.rules[0].should.have.property('_id');\n            res.body.privacy.rules[0].catogery.should.equal(\"any\");\n            done();\n        }).catch(function (error) {\n            console.error(\"Failed\", error);\n            done(error);\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "7836b348-e8c5-4b55-bc3c-0725971cf179",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should add rule to the privacy",
            "fullTitle": "Data Lake privacy API GET all test should add rule to the privacy",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_index.app).post('/api/privacy/' + testprivacy_id + '/rules').set('Authorization', token).send(testRule).expect(201).then(function (res) {\n            res.should.have.property('status').equal(201);\n            done();\n        }).catch(function (error) {\n            console.error(\"Failed\", error);\n            done(error);\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "e967d3b6-a45f-4829-8278-0bbc9bd49bb4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should get privacy by _id and check for newly added rule",
            "fullTitle": "Data Lake privacy API GET all test should get privacy by _id and check for newly added rule",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_index.app).get('/api/privacy/' + testprivacy_id).set('Authorization', token).expect(200).then(function (res) {\n            res.should.have.property('status').equal(200);\n            console.log(\"==============resp json===========================\");\n            console.log(res.body);\n            console.log(\" res.body.privacy.rules.length =\" + res.body.privacy.rules.length);\n            console.log(\"==============resp json===========================\");\n            res.body.privacy.rules.length.should.equal(2);\n            res.body.privacy.rules[1].catogery.should.equal(testRule.catogery);\n            done();\n        }).catch(function (error) {\n            console.error(\"Failed\", error);\n            done(error);\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "e64fe214-c653-434a-956a-0bffa0c041a4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should delete privacy by _id",
            "fullTitle": "Data Lake privacy API GET all test should delete privacy by _id",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "(0, _supertest2.default)(_index.app).delete('/api/privacy/' + testprivacy_id).set('Authorization', token).expect(204).then(function (res) {\n            res.should.have.property('status').equal(204);\n            done();\n        }).catch(function (error) {\n            console.error(\"Failed\", error);\n            done(error);\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "d553fec9-1c41-43c2-8f64-73280e61046c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not return the any privacy for _id",
            "fullTitle": "Data Lake privacy API GET all test should not return the any privacy for _id",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "d30ef1ee-611e-436b-8445-4c16fcb8226e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "8590d40d-9937-4863-a7fe-587248748e42",
          "74a37227-bf83-41bc-a7b8-ed13a20d2f5b",
          "1c0fbb80-951c-46bf-aca2-55e199bb81d3",
          "7836b348-e8c5-4b55-bc3c-0725971cf179",
          "e967d3b6-a45f-4829-8278-0bbc9bd49bb4",
          "e64fe214-c653-434a-956a-0bffa0c041a4",
          "d553fec9-1c41-43c2-8f64-73280e61046c",
          "d30ef1ee-611e-436b-8445-4c16fcb8226e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 72,
        "root": false,
        "rootEmpty": false,
        "_timeout": 120000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}