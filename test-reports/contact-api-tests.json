{
  "stats": {
    "suites": 3,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-20T05:57:52.501Z",
    "end": "2019-05-20T05:57:53.102Z",
    "duration": 601,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "e99f97d4-bbf5-474f-b678-823a9a5cc811",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "9b6ce279-313a-4faa-98e0-b7d0970958fc",
        "title": "postModelTests",
        "fullFile": "C:\\Users\\Sreenath\\Downloads\\latest\\NodeLabs\\DataLakeAPI\\api\\activities\\tests\\testActivitySchema.js",
        "file": "\\api\\activities\\tests\\testActivitySchema.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "postModelTests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var id = _mongoose2.default.Types.ObjectId().toString(); //generates pseudo random ObjectID \nact = {\n    user: id,\n    title: \"A title\",\n    url: \"random.com\"\n};",
            "err": {},
            "isRoot": false,
            "uuid": "d6010f78-9415-4b45-b399-7fc65eca3137",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should validate a post with a user and title",
            "fullTitle": "postModelTests should validate a post with a user and title",
            "timedOut": false,
            "duration": 15,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// const post={user: \"5ca22a64816cd8423c27214d\", title: \"A title\"};\nvar m = new _actsModel2.default(act);\nm.validate(function (err) {\n    _should2.default.not.exist(err);\n    m.title.should.equal(act.title);\n    m.user.toString().should.equal(act.user);\n    //    m.title.should.equal(\"A title\");\n    //    m.user.toString().should.equal(\"5ca22a64816cd8423c27214d\");\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6b323d91-35d9-4536-9429-d26a284842c3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should require a user and title",
            "fullTitle": "postModelTests should require a user and title",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var wrongact = { url: \"qaz.cbn.xom\" };\n        var m = new _actsModel2.default(wrongact);\n        m.validate(function (err) {\n            var errors = err.errors;\n            errors.should.have.property(\"user\");\n            errors.should.have.property(\"title\");\n            done();\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "039751b4-b143-49b6-b898-2be8b63e3715",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6b323d91-35d9-4536-9429-d26a284842c3",
          "039751b4-b143-49b6-b898-2be8b63e3715"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 18,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4e9be4a2-bbd0-44fc-a97a-b18273706ee0",
        "title": "privacy model test",
        "fullFile": "C:\\Users\\Sreenath\\Downloads\\latest\\NodeLabs\\DataLakeAPI\\api\\privacy\\tests\\testPrivacySchema.js",
        "file": "\\api\\privacy\\tests\\testPrivacySchema.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "privacy model test \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var id = _mongoose2.default.Types.ObjectId().toString(); //generates pseudo random ObjectID \nprivacy = {\n    user: id,\n    label: \"privacy1\"\n};",
            "err": {},
            "isRoot": false,
            "uuid": "3a5257f0-0cf5-4b08-8cf9-c3f4b0028425",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should validate a privacy with a label and user ",
            "fullTitle": "privacy model test should validate a privacy with a label and user ",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var m = new _privacyModel2.default(privacy);\nm.validate(function (err) {\n    _should2.default.not.exist(err);\n    m.label.should.equal(privacy.label);\n    m.user.toString().should.equal(privacy.user);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0ace8ad1-9637-487e-b672-5e6c8fc4d85c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should require a user and title",
            "fullTitle": "privacy model test should require a user and title",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var incorrectPrivacy = {\n            statement: \" this privacy statement\"\n        };\n        var m = new _privacyModel2.default(incorrectPrivacy);\n        m.validate(function (err) {\n            var errors = err.errors;\n            errors.should.have.property(\"label\");\n            errors.should.have.property(\"user\");\n            done();\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "969d8f9b-1aad-4faf-ade3-ca961aafdf8d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to add a rule to privacy",
            "fullTitle": "privacy model test should be able to add a rule to privacy",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var m = new _privacyModel2.default(privacy);\nm.rules.push({\n    catogery: \"work\",\n    level: \"low\"\n});\nm.validate(function (err) {\n    _should2.default.not.exist(err);\n    m.rules[0].catogery.should.equal(\"work\");\n    m.rules[0].level.should.equal(\"low\");\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2f137b75-50d5-460a-9068-2350c81d9872",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should require a both catogery and level to add a rule to privacy",
            "fullTitle": "privacy model test should require a both catogery and level to add a rule to privacy",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var m = new _privacyModel2.default(privacy);\nm.rules.push({\n    level: \"high\"\n});\nm.validate(function (err) {\n    _should2.default.exist(err);\n    var errors = err.errors;\n    errors.should.have.property(\"rules.0.catogery\");\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "bfcb1b82-a894-4f0f-9b37-22c94f046696",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0ace8ad1-9637-487e-b672-5e6c8fc4d85c",
          "969d8f9b-1aad-4faf-ade3-ca961aafdf8d",
          "2f137b75-50d5-460a-9068-2350c81d9872",
          "bfcb1b82-a894-4f0f-9b37-22c94f046696"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 12,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b5e752ae-9705-47c6-8d0f-34d506d9fec5",
        "title": "userModelTests",
        "fullFile": "C:\\Users\\Sreenath\\Downloads\\latest\\NodeLabs\\DataLakeAPI\\api\\users\\tests\\testUsersSchema.js",
        "file": "\\api\\users\\tests\\testUsersSchema.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should require a username and password",
            "fullTitle": "userModelTests should require a username and password",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var user = { auser: \"This is not valid\" };\n        var m = new _userModel2.default(user);\n        m.validate(function (err) {\n            _should2.default.exist(err);\n            var errors = err.errors;\n            errors.should.have.property(\"username\");\n            errors.should.have.property(\"password\");\n            done();\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "486cfcd5-f316-4472-a0a6-3de148f38737",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should validate a user with a username and password",
            "fullTitle": "userModelTests should validate a user with a username and password",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var username = \"fxwalsh\";\nvar password = \"pass\";\nvar user = { username: username, password: password };\nvar m = new _userModel2.default(user);\nm.validate(function (err) {\n    _should2.default.not.exist(err);\n    m.username.should.equal(username);\n    m.password.should.equal(password);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "94febb0a-bda0-432b-a929-01b2ac0e02f8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should search using username",
            "fullTitle": "userModelTests should search using username",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return callSandboxedFn(this, slice.call(arguments), callback, handleFn);",
            "err": {},
            "isRoot": false,
            "uuid": "a67aea36-d794-4d6a-b55f-97511b9b6bec",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should detect matching passwords",
            "fullTitle": "userModelTests should detect matching passwords",
            "timedOut": false,
            "duration": 268,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// eslint-disable-line no-unused-vars\n                return callSandboxedFn(this, slice.call(arguments), callback, handleAsyncFn);",
            "err": {},
            "isRoot": false,
            "uuid": "4419adc3-b81a-40a1-bd44-86468bade5fb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should reject incorrect passwords",
            "fullTitle": "userModelTests should reject incorrect passwords",
            "timedOut": false,
            "duration": 242,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var username = \"fxwalsh\";\n        var password1 = \"$2a$10$hxklBTD1KLdYOCrulbtf8OKxjxFEc5WBCODCCCYGb67udslRc0mHi\";\n        var password2 = \"$2a$10$SHxM7TRWShaNrJN1IDoOduBDmcll5sSJmYN9RHFjuGxP/iZr8Y4pe\";\n        var user1 = { username: username, password: password1 };\n        var user2 = { username: username, password: password2 };\n        var m1 = new _userModel2.default(user1);\n        var m2 = new _userModel2.default(user2);\n        m1.comparePassword(m2.password, function (err, result) {\n            _should2.default.not.exist(err);\n            result.should.not.be.true;\n            done();\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "48ba184d-bf49-4ccd-986c-4e8e6ade9b3b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "486cfcd5-f316-4472-a0a6-3de148f38737",
          "94febb0a-bda0-432b-a929-01b2ac0e02f8",
          "a67aea36-d794-4d6a-b55f-97511b9b6bec",
          "4419adc3-b81a-40a1-bd44-86468bade5fb",
          "48ba184d-bf49-4ccd-986c-4e8e6ade9b3b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 523,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}