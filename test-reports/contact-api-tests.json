{
  "stats": {
    "suites": 3,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-20T22:56:31.702Z",
    "end": "2019-05-20T22:56:32.314Z",
    "duration": 612,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "8b8791cb-f64c-4940-adac-e58e84383e91",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "7f549275-432c-4db1-a474-4c660e022efa",
        "title": "postModelTests",
        "fullFile": "C:\\Users\\Sreenath\\Downloads\\latest\\NodeLabs\\DataLakeAPI\\api\\activities\\tests\\testActivitySchema.js",
        "file": "\\api\\activities\\tests\\testActivitySchema.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "postModelTests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var id = _mongoose2.default.Types.ObjectId().toString(); //generates pseudo random ObjectID \nact = {\n    user: id,\n    title: \"A title\",\n    url: \"random.com\"\n};",
            "err": {},
            "isRoot": false,
            "uuid": "96facfe5-0217-4a51-a25b-f8376cdf9ba7",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should validate a post with a user and title",
            "fullTitle": "postModelTests should validate a post with a user and title",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// const post={user: \"5ca22a64816cd8423c27214d\", title: \"A title\"};\nvar m = new _actsModel2.default(act);\nm.validate(function (err) {\n    _should2.default.not.exist(err);\n    m.title.should.equal(act.title);\n    m.user.toString().should.equal(act.user);\n    //    m.title.should.equal(\"A title\");\n    //    m.user.toString().should.equal(\"5ca22a64816cd8423c27214d\");\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "bf5227ed-80e8-4bad-bcb3-0adada552829",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should require a user and title",
            "fullTitle": "postModelTests should require a user and title",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var wrongact = { url: \"qaz.cbn.xom\" };\n        var m = new _actsModel2.default(wrongact);\n        m.validate(function (err) {\n            var errors = err.errors;\n            errors.should.have.property(\"user\");\n            errors.should.have.property(\"title\");\n            done();\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "1d0650c0-d626-41aa-a4d9-76f1c5ec3fa3",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "bf5227ed-80e8-4bad-bcb3-0adada552829",
          "1d0650c0-d626-41aa-a4d9-76f1c5ec3fa3"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 15,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "615b2468-b6be-48bc-9b1d-e0f0325e6158",
        "title": "privacy model test",
        "fullFile": "C:\\Users\\Sreenath\\Downloads\\latest\\NodeLabs\\DataLakeAPI\\api\\privacy\\tests\\testPrivacySchema.js",
        "file": "\\api\\privacy\\tests\\testPrivacySchema.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "privacy model test \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var id = _mongoose2.default.Types.ObjectId().toString(); //generates pseudo random ObjectID \nprivacy = {\n    user: id,\n    label: \"privacy1\"\n};",
            "err": {},
            "isRoot": false,
            "uuid": "ca53c97e-f773-48c9-8686-cb9798876720",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should validate a privacy with a label and user ",
            "fullTitle": "privacy model test should validate a privacy with a label and user ",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var m = new _privacyModel2.default(privacy);\nm.validate(function (err) {\n    _should2.default.not.exist(err);\n    m.label.should.equal(privacy.label);\n    m.user.toString().should.equal(privacy.user);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b7856174-6220-4ed0-a7d0-3b012b1530c5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should require a user and title",
            "fullTitle": "privacy model test should require a user and title",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var incorrectPrivacy = {\n            statement: \" this privacy statement\"\n        };\n        var m = new _privacyModel2.default(incorrectPrivacy);\n        m.validate(function (err) {\n            var errors = err.errors;\n            errors.should.have.property(\"label\");\n            errors.should.have.property(\"user\");\n            done();\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "a700a48f-700c-4b4e-aa3a-bc95e7afb747",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to add a rule to privacy",
            "fullTitle": "privacy model test should be able to add a rule to privacy",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var m = new _privacyModel2.default(privacy);\nm.rules.push({\n    catogery: \"work\",\n    level: \"low\"\n});\nm.validate(function (err) {\n    _should2.default.not.exist(err);\n    m.rules[0].catogery.should.equal(\"work\");\n    m.rules[0].level.should.equal(\"low\");\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "51bd9d27-2785-4b1f-a8da-853104563f61",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should require a both catogery and level to add a rule to privacy",
            "fullTitle": "privacy model test should require a both catogery and level to add a rule to privacy",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var m = new _privacyModel2.default(privacy);\nm.rules.push({\n    level: \"high\"\n});\nm.validate(function (err) {\n    _should2.default.exist(err);\n    var errors = err.errors;\n    errors.should.have.property(\"rules.0.catogery\");\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8e12e0de-c99a-4a45-bb5a-0624c79d42f3",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b7856174-6220-4ed0-a7d0-3b012b1530c5",
          "a700a48f-700c-4b4e-aa3a-bc95e7afb747",
          "51bd9d27-2785-4b1f-a8da-853104563f61",
          "8e12e0de-c99a-4a45-bb5a-0624c79d42f3"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 11,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7c369567-fa62-407e-a336-cc08c52b6f1c",
        "title": "userModelTests",
        "fullFile": "C:\\Users\\Sreenath\\Downloads\\latest\\NodeLabs\\DataLakeAPI\\api\\users\\tests\\testUsersSchema.js",
        "file": "\\api\\users\\tests\\testUsersSchema.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should require a username and password",
            "fullTitle": "userModelTests should require a username and password",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var user = { auser: \"This is not valid\" };\n        var m = new _userModel2.default(user);\n        m.validate(function (err) {\n            _should2.default.exist(err);\n            var errors = err.errors;\n            errors.should.have.property(\"username\");\n            errors.should.have.property(\"password\");\n            done();\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "11adad96-e46b-4015-834e-e6e9aefb580c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should validate a user with a username and password",
            "fullTitle": "userModelTests should validate a user with a username and password",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var username = \"fxwalsh\";\nvar password = \"pass\";\nvar user = { username: username, password: password };\nvar m = new _userModel2.default(user);\nm.validate(function (err) {\n    _should2.default.not.exist(err);\n    m.username.should.equal(username);\n    m.password.should.equal(password);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7d2c5423-8c14-4613-b6dc-6284356357bf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should search using username",
            "fullTitle": "userModelTests should search using username",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return callSandboxedFn(this, slice.call(arguments), callback, handleFn);",
            "err": {},
            "isRoot": false,
            "uuid": "9e05d805-6695-4607-9170-4cc7eb7d2d21",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should detect matching passwords",
            "fullTitle": "userModelTests should detect matching passwords",
            "timedOut": false,
            "duration": 279,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// eslint-disable-line no-unused-vars\n                return callSandboxedFn(this, slice.call(arguments), callback, handleAsyncFn);",
            "err": {},
            "isRoot": false,
            "uuid": "0ea3a75a-1f9b-4472-9af4-b47b7076de78",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should reject incorrect passwords",
            "fullTitle": "userModelTests should reject incorrect passwords",
            "timedOut": false,
            "duration": 240,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var username = \"fxwalsh\";\n        var password1 = \"$2a$10$hxklBTD1KLdYOCrulbtf8OKxjxFEc5WBCODCCCYGb67udslRc0mHi\";\n        var password2 = \"$2a$10$SHxM7TRWShaNrJN1IDoOduBDmcll5sSJmYN9RHFjuGxP/iZr8Y4pe\";\n        var user1 = { username: username, password: password1 };\n        var user2 = { username: username, password: password2 };\n        var m1 = new _userModel2.default(user1);\n        var m2 = new _userModel2.default(user2);\n        m1.comparePassword(m2.password, function (err, result) {\n            _should2.default.not.exist(err);\n            result.should.not.be.true;\n            done();\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "ae86f543-c034-4894-8431-4d195523ea66",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "11adad96-e46b-4015-834e-e6e9aefb580c",
          "7d2c5423-8c14-4613-b6dc-6284356357bf",
          "9e05d805-6695-4607-9170-4cc7eb7d2d21",
          "0ea3a75a-1f9b-4472-9af4-b47b7076de78",
          "ae86f543-c034-4894-8431-4d195523ea66"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 536,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}